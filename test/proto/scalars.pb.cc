// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: scalars.proto
// Protobuf C++ Version: 5.29.3

#include "scalars.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Scalars::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : f_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        f_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        f_int64_{::int64_t{0}},
        f_int32_{0},
        f_uint32_{0u},
        f_uint64_{::uint64_t{0u}},
        f_sint64_{::int64_t{0}},
        f_sint32_{0},
        f_fixed32_{0u},
        f_fixed64_{::uint64_t{0u}},
        f_sfixed64_{::int64_t{0}},
        f_sfixed32_{0},
        f_bool_{false},
        f_double_{0},
        f_float_{0},
        f_enum_{static_cast< ::TestEnum >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Scalars::Scalars(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScalarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScalarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScalarsDefaultTypeInternal() {}
  union {
    Scalars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScalarsDefaultTypeInternal _Scalars_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_scalars_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_scalars_2eproto = nullptr;
const ::uint32_t
    TableStruct_scalars_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Scalars, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_int32_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_int64_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_uint32_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_uint64_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_sint32_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_sint64_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_fixed32_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_fixed64_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_sfixed32_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_sfixed64_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_bool_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_float_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_double_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_string_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_bytes_),
        PROTOBUF_FIELD_OFFSET(::Scalars, _impl_.f_enum_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Scalars)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Scalars_default_instance_._instance,
};
const char descriptor_table_protodef_scalars_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rscalars.proto\"\262\002\n\007Scalars\022\017\n\007f_int32\030\001"
    " \001(\005\022\017\n\007f_int64\030\002 \001(\003\022\020\n\010f_uint32\030\003 \001(\r\022"
    "\020\n\010f_uint64\030\004 \001(\004\022\020\n\010f_sint32\030\005 \001(\021\022\020\n\010f"
    "_sint64\030\006 \001(\022\022\021\n\tf_fixed32\030\007 \001(\007\022\021\n\tf_fi"
    "xed64\030\010 \001(\006\022\022\n\nf_sfixed32\030\t \001(\017\022\022\n\nf_sfi"
    "xed64\030\n \001(\020\022\016\n\006f_bool\030\013 \001(\010\022\017\n\007f_float\030\014"
    " \001(\002\022\020\n\010f_double\030\r \001(\001\022\020\n\010f_string\030\016 \001(\t"
    "\022\017\n\007f_bytes\030\017 \001(\014\022\031\n\006f_enum\030\020 \001(\0162\t.Test"
    "Enum*5\n\010TestEnum\022\r\n\tENUM_ZERO\020\000\022\014\n\010ENUM_"
    "ONE\020\001\022\014\n\010ENUM_TWO\020\002b\006proto3"
};
static ::absl::once_flag descriptor_table_scalars_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_scalars_2eproto = {
    false,
    false,
    387,
    descriptor_table_protodef_scalars_2eproto,
    "scalars.proto",
    &descriptor_table_scalars_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_scalars_2eproto::offsets,
    file_level_enum_descriptors_scalars_2eproto,
    file_level_service_descriptors_scalars_2eproto,
};
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_scalars_2eproto);
  return file_level_enum_descriptors_scalars_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TestEnum_internal_data_[] = {
    196608u, 0u, };
bool TestEnum_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class Scalars::_Internal {
 public:
};

Scalars::Scalars(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Scalars)
}
inline PROTOBUF_NDEBUG_INLINE Scalars::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Scalars& from_msg)
      : f_string_(arena, from.f_string_),
        f_bytes_(arena, from.f_bytes_),
        _cached_size_{0} {}

Scalars::Scalars(
    ::google::protobuf::Arena* arena,
    const Scalars& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Scalars* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, f_int64_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, f_int64_),
           offsetof(Impl_, f_enum_) -
               offsetof(Impl_, f_int64_) +
               sizeof(Impl_::f_enum_));

  // @@protoc_insertion_point(copy_constructor:Scalars)
}
inline PROTOBUF_NDEBUG_INLINE Scalars::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : f_string_(arena),
        f_bytes_(arena),
        _cached_size_{0} {}

inline void Scalars::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, f_int64_),
           0,
           offsetof(Impl_, f_enum_) -
               offsetof(Impl_, f_int64_) +
               sizeof(Impl_::f_enum_));
}
Scalars::~Scalars() {
  // @@protoc_insertion_point(destructor:Scalars)
  SharedDtor(*this);
}
inline void Scalars::SharedDtor(MessageLite& self) {
  Scalars& this_ = static_cast<Scalars&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.f_string_.Destroy();
  this_._impl_.f_bytes_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Scalars::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Scalars(arena);
}
constexpr auto Scalars::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Scalars),
                                            alignof(Scalars));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Scalars::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Scalars_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Scalars::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Scalars>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Scalars::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Scalars>(), &Scalars::ByteSizeLong,
            &Scalars::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Scalars, _impl_._cached_size_),
        false,
    },
    &Scalars::kDescriptorMethods,
    &descriptor_table_scalars_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Scalars::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 40, 2> Scalars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Scalars>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .TestEnum f_enum = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_enum_)}},
    // int32 f_int32 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Scalars, _impl_.f_int32_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_int32_)}},
    // int64 f_int64 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Scalars, _impl_.f_int64_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_int64_)}},
    // uint32 f_uint32 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Scalars, _impl_.f_uint32_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_uint32_)}},
    // uint64 f_uint64 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Scalars, _impl_.f_uint64_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_uint64_)}},
    // sint32 f_sint32 = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sint32_)}},
    // sint64 f_sint64 = 6;
    {::_pbi::TcParser::FastZ64S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sint64_)}},
    // fixed32 f_fixed32 = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_fixed32_)}},
    // fixed64 f_fixed64 = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_fixed64_)}},
    // sfixed32 f_sfixed32 = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sfixed32_)}},
    // sfixed64 f_sfixed64 = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sfixed64_)}},
    // bool f_bool = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Scalars, _impl_.f_bool_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_bool_)}},
    // float f_float = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_float_)}},
    // double f_double = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_double_)}},
    // string f_string = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_string_)}},
    // bytes f_bytes = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_bytes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 f_int32 = 1;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_int32_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 f_int64 = 2;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_int64_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint32 f_uint32 = 3;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_uint32_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 f_uint64 = 4;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_uint64_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // sint32 f_sint32 = 5;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sint32_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint64 f_sint64 = 6;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sint64_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // fixed32 f_fixed32 = 7;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_fixed32_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed32)},
    // fixed64 f_fixed64 = 8;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_fixed64_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // sfixed32 f_sfixed32 = 9;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sfixed32_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed32)},
    // sfixed64 f_sfixed64 = 10;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_sfixed64_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSFixed64)},
    // bool f_bool = 11;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_bool_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float f_float = 12;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_float_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double f_double = 13;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_double_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string f_string = 14;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes f_bytes = 15;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .TestEnum f_enum = 16;
    {PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_enum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\7\0\0\0\0\0\0\0\0\0\0\0\0\0\10\0\0\0\0\0\0\0\0\0"
    "Scalars"
    "f_string"
  }},
};

PROTOBUF_NOINLINE void Scalars::Clear() {
// @@protoc_insertion_point(message_clear_start:Scalars)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f_string_.ClearToEmpty();
  _impl_.f_bytes_.ClearToEmpty();
  ::memset(&_impl_.f_int64_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.f_enum_) -
      reinterpret_cast<char*>(&_impl_.f_int64_)) + sizeof(_impl_.f_enum_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Scalars::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Scalars& this_ = static_cast<const Scalars&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Scalars::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Scalars& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Scalars)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 f_int32 = 1;
          if (this_._internal_f_int32() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_f_int32(), target);
          }

          // int64 f_int64 = 2;
          if (this_._internal_f_int64() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_f_int64(), target);
          }

          // uint32 f_uint32 = 3;
          if (this_._internal_f_uint32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_f_uint32(), target);
          }

          // uint64 f_uint64 = 4;
          if (this_._internal_f_uint64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_f_uint64(), target);
          }

          // sint32 f_sint32 = 5;
          if (this_._internal_f_sint32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal_f_sint32(), target);
          }

          // sint64 f_sint64 = 6;
          if (this_._internal_f_sint64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                6, this_._internal_f_sint64(), target);
          }

          // fixed32 f_fixed32 = 7;
          if (this_._internal_f_fixed32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
                7, this_._internal_f_fixed32(), target);
          }

          // fixed64 f_fixed64 = 8;
          if (this_._internal_f_fixed64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                8, this_._internal_f_fixed64(), target);
          }

          // sfixed32 f_sfixed32 = 9;
          if (this_._internal_f_sfixed32() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
                9, this_._internal_f_sfixed32(), target);
          }

          // sfixed64 f_sfixed64 = 10;
          if (this_._internal_f_sfixed64() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
                10, this_._internal_f_sfixed64(), target);
          }

          // bool f_bool = 11;
          if (this_._internal_f_bool() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_f_bool(), target);
          }

          // float f_float = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_f_float()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_f_float(), target);
          }

          // double f_double = 13;
          if (::absl::bit_cast<::uint64_t>(this_._internal_f_double()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_f_double(), target);
          }

          // string f_string = 14;
          if (!this_._internal_f_string().empty()) {
            const std::string& _s = this_._internal_f_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Scalars.f_string");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // bytes f_bytes = 15;
          if (!this_._internal_f_bytes().empty()) {
            const std::string& _s = this_._internal_f_bytes();
            target = stream->WriteBytesMaybeAliased(15, _s, target);
          }

          // .TestEnum f_enum = 16;
          if (this_._internal_f_enum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                16, this_._internal_f_enum(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Scalars)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Scalars::ByteSizeLong(const MessageLite& base) {
          const Scalars& this_ = static_cast<const Scalars&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Scalars::ByteSizeLong() const {
          const Scalars& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Scalars)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string f_string = 14;
            if (!this_._internal_f_string().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_f_string());
            }
            // bytes f_bytes = 15;
            if (!this_._internal_f_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_f_bytes());
            }
            // int64 f_int64 = 2;
            if (this_._internal_f_int64() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_f_int64());
            }
            // int32 f_int32 = 1;
            if (this_._internal_f_int32() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_f_int32());
            }
            // uint32 f_uint32 = 3;
            if (this_._internal_f_uint32() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_f_uint32());
            }
            // uint64 f_uint64 = 4;
            if (this_._internal_f_uint64() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_f_uint64());
            }
            // sint64 f_sint64 = 6;
            if (this_._internal_f_sint64() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_f_sint64());
            }
            // sint32 f_sint32 = 5;
            if (this_._internal_f_sint32() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_f_sint32());
            }
            // fixed32 f_fixed32 = 7;
            if (this_._internal_f_fixed32() != 0) {
              total_size += 5;
            }
            // fixed64 f_fixed64 = 8;
            if (this_._internal_f_fixed64() != 0) {
              total_size += 9;
            }
            // sfixed64 f_sfixed64 = 10;
            if (this_._internal_f_sfixed64() != 0) {
              total_size += 9;
            }
            // sfixed32 f_sfixed32 = 9;
            if (this_._internal_f_sfixed32() != 0) {
              total_size += 5;
            }
            // bool f_bool = 11;
            if (this_._internal_f_bool() != 0) {
              total_size += 2;
            }
            // double f_double = 13;
            if (::absl::bit_cast<::uint64_t>(this_._internal_f_double()) != 0) {
              total_size += 9;
            }
            // float f_float = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_f_float()) != 0) {
              total_size += 5;
            }
            // .TestEnum f_enum = 16;
            if (this_._internal_f_enum() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_f_enum());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Scalars::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Scalars*>(&to_msg);
  auto& from = static_cast<const Scalars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Scalars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_f_string().empty()) {
    _this->_internal_set_f_string(from._internal_f_string());
  }
  if (!from._internal_f_bytes().empty()) {
    _this->_internal_set_f_bytes(from._internal_f_bytes());
  }
  if (from._internal_f_int64() != 0) {
    _this->_impl_.f_int64_ = from._impl_.f_int64_;
  }
  if (from._internal_f_int32() != 0) {
    _this->_impl_.f_int32_ = from._impl_.f_int32_;
  }
  if (from._internal_f_uint32() != 0) {
    _this->_impl_.f_uint32_ = from._impl_.f_uint32_;
  }
  if (from._internal_f_uint64() != 0) {
    _this->_impl_.f_uint64_ = from._impl_.f_uint64_;
  }
  if (from._internal_f_sint64() != 0) {
    _this->_impl_.f_sint64_ = from._impl_.f_sint64_;
  }
  if (from._internal_f_sint32() != 0) {
    _this->_impl_.f_sint32_ = from._impl_.f_sint32_;
  }
  if (from._internal_f_fixed32() != 0) {
    _this->_impl_.f_fixed32_ = from._impl_.f_fixed32_;
  }
  if (from._internal_f_fixed64() != 0) {
    _this->_impl_.f_fixed64_ = from._impl_.f_fixed64_;
  }
  if (from._internal_f_sfixed64() != 0) {
    _this->_impl_.f_sfixed64_ = from._impl_.f_sfixed64_;
  }
  if (from._internal_f_sfixed32() != 0) {
    _this->_impl_.f_sfixed32_ = from._impl_.f_sfixed32_;
  }
  if (from._internal_f_bool() != 0) {
    _this->_impl_.f_bool_ = from._impl_.f_bool_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_f_double()) != 0) {
    _this->_impl_.f_double_ = from._impl_.f_double_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_f_float()) != 0) {
    _this->_impl_.f_float_ = from._impl_.f_float_;
  }
  if (from._internal_f_enum() != 0) {
    _this->_impl_.f_enum_ = from._impl_.f_enum_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Scalars::CopyFrom(const Scalars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Scalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Scalars::InternalSwap(Scalars* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.f_string_, &other->_impl_.f_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.f_bytes_, &other->_impl_.f_bytes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_enum_)
      + sizeof(Scalars::_impl_.f_enum_)
      - PROTOBUF_FIELD_OFFSET(Scalars, _impl_.f_int64_)>(
          reinterpret_cast<char*>(&_impl_.f_int64_),
          reinterpret_cast<char*>(&other->_impl_.f_int64_));
}

::google::protobuf::Metadata Scalars::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_scalars_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
